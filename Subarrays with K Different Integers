class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return func(nums, k) - func(nums, k - 1);
    }

    public int func(int nums[], int k) {
        int n = nums.length;
        int count = 0;
        int left = 0;
        int right = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        while (right < n) {
            map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);

            while (map.size() > k) {
                map.put(nums[left], map.get(nums[left]) - 1);
                if (map.get(nums[left]) == 0) {
                    map.remove(nums[left]);
                }
                left++;
            }
            count += (right - left + 1);
            right++;
        }
        return count;
    }
}







class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        int n = nums.length;
        int count = 0;
        
        for(int i = 0; i < n; i++) {
            HashMap<Integer, Integer> map = new HashMap<>();
            for(int j = i; j < n; j++) {
                map.put(nums[j], map.getOrDefault(nums[j], 0)+1);

                if(map.size() == k) {
                    count++;
                } else if (map.size() > k){
                    break;
                }
            }
        }
        return count;
    }
}
