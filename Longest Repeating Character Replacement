class Solution {
    public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLen = 0;
        int maxFreq = 0;
        int freq[] = new int[26];
        int left = 0;
        int right = 0;
        while(right < n) {
            freq[s.charAt(right) - 'A']++;
            maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);

            while((right-left+1) - maxFreq > k) {
                freq[s.charAt(left)-'A']--;
                maxFreq = 0;
                for(int i = 0; i < 26; i++) {
                    maxFreq = Math.max(maxFreq, freq[i]);
                }
                left++;
            }

            if((right-left+1) - maxFreq <= k) {
                maxLen = Math.max(maxLen, right-left+1);
            }
            right++;
        }
        return maxLen;
    }
}









class Solution {
    public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLen = 0;
        for (int i = 0; i < n; i++) {
            int hash[] = new int[26];
            int maxFreq = 0;
            for (int j = i; j < n; j++) {
                hash[s.charAt(j) - 'A']++;
                maxFreq = Math.max(maxFreq, hash[s.charAt(j) - 'A']);
                int operations = (j - i + 1) - maxFreq;

                if (operations <= k) {
                    maxLen = Math.max(maxLen, j - i + 1);
                } else {
                    break;
                }
            }
        }
        return maxLen;
    }
}
