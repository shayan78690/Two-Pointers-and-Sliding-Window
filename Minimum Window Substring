class Solution {
    public String minWindow(String s, String t) {
        int n = s.length();
        int m = t.length();
        int hash[] = new int[256];
        for (int i = 0; i < m; i++) {
            hash[t.charAt(i)]++;
        }
        int minLen = Integer.MAX_VALUE;
        int count = 0;
        int left = 0;
        int right = 0;
        int startIdx = -1;
        while (right < n) {
            if (hash[s.charAt(right)] > 0) {
                count++;
            }
            hash[s.charAt(right)]--;
            while (count == m) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    startIdx = left;
                }
                hash[s.charAt(left)]++;
                if (hash[s.charAt(left)] > 0) {
                    count--;
                }
                left++;
            }

            right++;
        }

        return startIdx == -1 ? "" : s.substring(startIdx, startIdx + minLen);
    }
}











class Solution {
    public String minWindow(String s, String t) {
        int n = s.length();
        int m = t.length();
        int minLength = Integer.MAX_VALUE;
        int startIdx = -1;
        for(int i = 0; i < n; i++) {
            int hash[] = new int[256];
            int count = 0;
            for(int j = 0; j < m; j++) {
                hash[t.charAt(j)]++;
            }
            for(int j = i; j < n; j++) {
                if(hash[s.charAt(j)] > 0) {
                    count++;
                    hash[s.charAt(j)]--;
                }
                if(count == m) {
                    minLength = Math.min(minLength, j-i+1);
                    startIdx = i;
                    break;
                }
            }
        }
         if (startIdx == -1) {  
            return "";
        }
        return s.substring(startIdx, startIdx + minLength);

    }
}
