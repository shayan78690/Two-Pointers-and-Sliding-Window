class Solution {
    public int longestOnes(int[] nums, int k) {
        int n = nums.length;
        int left = 0;
        int right = 0;
        int maxLen = 0;
        int zeroes = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeroes++;
            }
            if (zeroes > k) {
                if (nums[left] == 0) {
                    zeroes--;
                }
                left++;
            }
            int len = right - left + 1;
            maxLen = Math.max(len, maxLen);
            right++;
        }
        return maxLen;
    }
}








class Solution {
    public int longestOnes(int[] nums, int k) {
        int n = nums.length;
        int left = 0;
        int right = 0;
        int zeroes = 0;
        int maxLen = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeroes++;
            }
            while (zeroes > k) {
                if (nums[left] == 0) {
                    zeroes--;
                }
                left++;
            }

            if (zeroes <= k) {
                int len = right - left + 1;
                maxLen = Math.max(len, maxLen);
            }
            right++;
        }
        return maxLen;
    }
}








class Solution {
    public int longestOnes(int[] nums, int k) {
        int maxLen = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int countZeroes = 0;
            for (int j = i; j < n; j++) {
                if (nums[j] == 0) {
                    countZeroes++;
                }
                if (countZeroes <= k) {
                    int len = j - i + 1;
                    maxLen = Math.max(len, maxLen);
                } else if (countZeroes > k) {
                    break;
                }
            }
        }
        return maxLen;
    }
}
